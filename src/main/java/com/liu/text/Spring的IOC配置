一、bean标签
- id：bean的名称， 可以通过id值获取bean定义的资源。（唯一）
- name：bean的名称，可以通过name值获取bean定义的资源。（唯一）【类似于别名】
- class：bean的类型 (全限定名)
二、bean的作用域
- singleton : 单例 (默认值)
      1). 这个类在容器只会有一个实例
      2). 饿汉单例 : 工厂加载配置文件的时候,实例就创建了
      效率高
- prototype : 多例
      1). 这个类在容器有多个实例
      2). 懒汉多例 : 工厂加载配置文件的时候,没有实例, 获取的时候才创建
三、bean的生命周期
- 单例对象：scope="singleton"
  - 一个应用只有一个对象实例。它的作用范围就是整个应用。
  - 生命周期：
    - 对象出生：当应用加载，创建容器时，对象就被创建了。
    - 对象活着：只要容器在，对象一直活着。
    - 对象死亡：当应用卸载，销毁容器时，对象就被销毁了。
- 多例对象：scope="prototype"
  - 每次访问对象时，都会重新创建对象实例。
  - 生命周期：
    - 对象出生：当使用对象时，创建新的对象实例（getBean）。
    - 对象活着：只要对象在使用中，就一直活着。
    - 对象死亡：当对象长时间不用时，会被java的垃圾回收器回收。
tips：在bean标签中，使用`init-method`，`destroy-method`两个属性，分别定义bean对象在初始化或销毁时要完成的工作
<bean init-method="指定初始化方法" destroy-method="指定销毁方法"></bean>
四、bean对象的创建方式
1.直接配置
2.静态工厂
3.实例工厂（了解）
五、依赖的注入DI(Dependency Injection)
由Spring框架以解耦的方式将dao对象传递到业务层中
常用的给类中成员变量赋值的方法：
setter注入方式和构造方法
1.setter注入方式
<bean id="beanId" class="ClassName">
    <!-- 给bean对象中的成员赋值（依赖注入） -->
	<property name="propertyName" value="propertyValue" ref="beanId"/>
</bean>
2.构造器注入
<bean id="beanId" class="ClassName">
	<constructor-arg name="argsName" value="argsValue" ref="beanId"/>
</bean>
要求类中必须有带参数的构造方法
3.集合类型数据注入
List、Set、Array、Map、Properties
<!-- List类型数据注入 -->
<bean id="beanId" class="className">
    <property name="成员变量名">
        <list>
             <value>元素</value>
        </list>
    </property>
</bean>
<!-- Set类型数据注入 -->
<bean id="beanId" class="className">
    <property name="成员变量名">
        <set>
            <value>元素</value>
        </set>
    </property>
</bean>
<!-- 数组类型数据注入 -->
<bean id="beanId" class="className">
    <property name="成员变量名">
         <array>
              <value>元素值</value>
         </array>
    </property>
</bean>
<!-- Map类型数据注入 -->
<bean id="beanId" class="className">
     <property name="成员变量名">
         <map>
             <entry key="key元素" value="value元素"/>
         </map>
     </property>
</bean>
<!-- Properties类型数据注入 -->
<bean id="beanId" class="className">
    <property name="成员变量名">
         <props>
              <prop key="key元素">value元素</prop>
         </props>
    </property>
</bean>

















