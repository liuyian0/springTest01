一、开启注解配置
需要在配置文件中开启Spring注解扫描
根据指定的包名，加载类中配置的注解项
<context:component-scan base-package="packageName"/>
注解格式和XML配置格式，差别仅仅是数据读取方式不同，从加载效率上来说注解优于XML配置文件
二、使用@Component注解装配bean
@Component   相当于在xml中配置：<bean id="" class="">
三、衍生注解
在@Component注解下衍生了@Controller、@Service、@Repository三个注解
@Controller：一般用于表现层的注解
@Service：一般用于业务层的注解
@Repository：一般用于持久层的注解
四、属性注入
使用@Autowired或@Qualifier实现引用类型属性注入
格式：
public class ClassName{
1.@Autowired
private 引用类型 对象名；
}
- 作用：按照类型注入引用类型对象
  - 当容器中只有一个类型匹配的对象时直接注入
  - 当有多个类型匹配的对象时，使用要注入的对象的变量名称作为bean的id，在spring容器查找，找到了也可以注入成功，找不到就报错。
- 细节：当使用注解注入属性时，可以省略setter方法
例：使用@Autowired向业务类中注入dao对象
@Autowired注解的属性：
required通常不写
取值：默认true（必定注入成功，失败报错）false（可以不成功）
2.@Qualifier格式
public class ClassName{
    @Autowired
    @Qualifier("beanId")
    private 引用类型 对象名;
}
在自动按照类型注入(@Autowired)的基础之上，再按照bean的id注入
3.使用@Value实现非引用类型(基本类型、String类、包装类，可以读取properti文件中的属性值，支持EL表达式)属性注入
例如：
public class ClassName{
@Value("100")
private int num;
@Value("zhangsan")
private String name;
}
4.使用@PropertySource加载properties文件
@PropertySource(value = "文件名.properties")
public class ClassName {
    @Value("${properties文件中的属性名}")
    private String attributeName;
    }
5.纯注解开发
取消spring的xml配置文件，使用纯注解开发模式：
1. 指定配置类，代替xml配置文件
2. 在配置类中指定要扫描的包
3. 使用AnnotationConfigApplicationContext类代替ClassPathXmlApplicationContext类
@Configuration注解：指定当前类是一个spring配置类，当创建容器时会从该类上加载注解
配置创建容器时要扫描的包
@ComponentScan("包名路径")
相当于xml文件中的<context:component-scan base-package="包名路径"/>
ApplicationContext ctx = new AnnotationConfigApplicationContext(SpringConfig.class);
6.加载第三方资源
①在配置文件中，把第三方框架中的类，配置到Spring容器中
例如：
    <!-- 配置Druid中的类，作为Spring容器中的一个资源 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="driverClassName" value="com.mysql.jdbc.Driver"></property>
        <property name="url" value="jdbc:mysql://127.0.0.1:3306/db1"></property>
        <property name="username" value="root"></property>
        <property name="password" value="itheima"></property>
    </bean>
②纯注解开发时，使用@Bean装配Bean
@Component
public class ClassName{
    @Bean("名字")
    public 返回值类型 方法名(){
        return 返回值;
    }
}
设置方法的返回值作为spring管理的bean（将方法的返回值作为一个bean,并且放入spring容器）

此外，还可以用@Import注解，导入第三方bean作为Spring控制的资源
@Import(value = {MyDataSource.class, MyDS.class , .... })//按照顺序加载
//@Import(...)//同一个类上，不允许出现2次Import
public class ClassName {
}
7.使用@Scope注解设置Bean的作用域singleton和prototype
8.bean的生命周期
使用@PostConstruct、@PreDestory设置初始化、销毁方法















