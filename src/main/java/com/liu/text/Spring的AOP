AOP（Aspect Oriented Programing）面向切面编程

作用：在程序运行期间，不修改源码的基础上对已有方法进行加强
优点：减少重复代码；提高开发效率；维护方便

AOP的实现方式：
1.基于JDK官方的动态代理（优先使用）
2.基于第三方的cglib的动态代理

Spring中已经整合了cglib，导入spring-context即可

面向切面编程(AOP)中的相关概念
1.Target（目标对象）
要被增强的对象（被代理类的对象）
2.Proxy（代理对象）
对目标对象的增强对象（生成的代理类对象）
3.Joinpoint（连接点）
目标对象中的可被增强的方法（被代理类中的方法）
- - 不可被增强的方法：
       - Proxy中被代理类不可被增强方法（父接口中没有的方法）
       - CGlib中被代理类不可被增强方法（final修饰的方法）
4. Pointcut（切入点）
   - 要被增强的方法（被代理类中要增强的方法）
     - 切入点一定是连接点；但连接点不一定是切入点
       - 切入点是要增强的方法，而该方法必须是连接点
       - 连接点，不一定要被增强
5. Advice（通知）
   -  通知是增强的那段代码形成的方法
   -  通知的分类：
      1. 前置通知    在方法之前进行增强
      2. 后置通知    在方法之后进行增强
      3. 异常通知    在方法异常进行增强
      4. 最终通知    最终执行的方法进行增强
      5. 环绕通知    单独使用（以上所有通知）
6. Aspect（切面）
   - 切面 = 切入点+通知
     - 目标方法和增强代码合到一起叫做切面
7. Weaving（织入）
   - 在运行过程中spring底层将通知和切入点进行整合的过程称为织入

> AOP的开发过程

开发阶段（开发者完成）

- 正常的制作程序
- 将非共性功能开发到对应的目标对象类中，并制作成切入点方法
- 将共性功能独立开发出来，制作成通知
- 在配置类中，声明切入点
- 在配置类中，声明切入点与通知间的关系（含通知类型），即切面

运行阶段（AOP完成）

- Spring容器加载配置文件时, 使用代理机制，动态创建目标对象的代理对象,根据通知类别，在代理对象的对应位置将通知对应的功能织入，形成完整的代码逻辑
- 当切入点方法被运行，将会调用代理对象的方法,达到增强目标对象的效果

AOP的开发方式
1.XML方式
2.注解方式

使用Spring中的AOP配置增强类中方法步骤（配置类SpringConfig0、接口AccountService、实现类AccountServiceImpl4、切面类AccountServiceAdvice、测试类AspectTest）
1. 导入相关坐标（Spring、切入点表达式aspectjweaver）
2. 开启aop注解支持
@EnableAspectJAutoProxy
public class SpringConfig{}
3. 编写切面类@Aspect  //配置当前类为切面类(切入点+通知)
   - 配置切入点       @Pointcut("execution(* com.itheima..AccountServiceImpl.*(..))")
   - 配置通知类型
4. 运行程序(测试)









