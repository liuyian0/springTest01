AOP（Aspect Oriented Programing）面向切面编程

作用：在程序运行期间，不修改源码的基础上对已有方法进行加强
优点：减少重复代码；提高开发效率；维护方便

AOP的实现方式：
1.基于JDK官方的动态代理（优先使用）
2.基于第三方的cglib的动态代理

Spring中已经整合了cglib，导入spring-context即可

面向切面编程(AOP)中的相关概念
1.Target（目标对象）
要被增强的对象（被代理类的对象）
2.Proxy（代理对象）
对目标对象的增强对象（生成的代理类对象）
3.Joinpoint（连接点）
目标对象中的可被增强的方法（被代理类中的方法）
- - 不可被增强的方法：
       - Proxy中被代理类不可被增强方法（父接口中没有的方法）
       - CGlib中被代理类不可被增强方法（final修饰的方法）
4. Pointcut（切入点）
   - 要被增强的方法（被代理类中要增强的方法）
     - 切入点一定是连接点；但连接点不一定是切入点
       - 切入点是要增强的方法，而该方法必须是连接点
       - 连接点，不一定要被增强
5. Advice（通知）
   -  通知是增强的那段代码形成的方法
   -  通知的分类：
      1. 前置通知(@Before)    在方法之前进行增强
      2. 后置通知(@AfterReturning)    在方法之后进行增强
      3. 异常通知(@AfterThrowing)    在方法异常进行增强
      4. 最终通知(@After)    最终执行的方法进行增强
      5. 环绕通知(@Around)    单独使用（以上所有通知）
6. Aspect（切面）
   - 切面 = 切入点+通知
     - 目标方法和增强代码合到一起叫做切面
7. Weaving（织入）
   - 在运行过程中spring底层将通知和切入点进行整合的过程称为织入

> AOP的开发过程

开发阶段（开发者完成）

- 正常的制作程序
- 将非共性功能开发到对应的目标对象类中，并制作成切入点方法
- 将共性功能独立开发出来，制作成通知
- 在配置类中，声明切入点
- 在配置类中，声明切入点与通知间的关系（含通知类型），即切面

运行阶段（AOP完成）

- Spring容器加载配置文件时, 使用代理机制，动态创建目标对象的代理对象,根据通知类别，在代理对象的对应位置将通知对应的功能织入，形成完整的代码逻辑
- 当切入点方法被运行，将会调用代理对象的方法,达到增强目标对象的效果

AOP的开发方式
1.XML方式
2.注解方式

使用Spring中的AOP配置增强类中方法步骤（配置类SpringConfig0、接口AccountService、实现类AccountServiceImpl4、切面类AccountServiceAdvice、测试类AspectTest）
1. 导入相关坐标（Spring、切入点表达式aspectjweaver）
2. 开启aop注解支持
@EnableAspectJAutoProxy
public class SpringConfig{}
3. 编写切面类@Aspect  //配置当前类为切面类(切入点+通知)
   - 配置切入点       @Pointcut("execution(* com.itheima..AccountServiceImpl.*(..))")
   - 配置通知类型
4. 运行程序(测试)


SpringAop的切入点表达式
spring的aop入门案例：
1. 导入依赖aspectjweaver
2. 编写service层（接口、实现类[目标对象]）
3. 编写切面类（切入点 、通知）
aop入门案例执行机制：
1. 创建目标对象：AccoucntServiceImpl  （使用IoC配置）
2. 创建代理对象
   2.1、基于目标对象   =>   代理类
   2.2、基于AccountServiceAdvice   =>   代理类方法体
   - 切面 = 切入点 + 通知
   2.3、Weaving（织入）
   - 在运行过程中spring底层将通知和切入点进行整合
3. 使用代理对象调用方法

事务案例：转账
数据库控制文件：db.properties
pojo类：Account
Mybatis配置类：MybatisConfig
Spring配置类：SpringConfig4
dao层：AccountDao2
业务层：AccountService2
实现类：AccountService2Impl
测试类：WebApp

Spring事务管理对象
JavaEE开发使用分层设计的思想进行
一般dao层只做数据库增删改查实现，当业务中包含多个dao层的调用时，需要在service层开启事务，对数据层中多个操作进行组合并归属于同一个事务进行处理
1. Spring事务核心对象介绍

2. 事务管理器对象(PlatformTransactionManager接口)
- DataSourceTransactionManager类
  - 适用于SpringJDBC或MyBatis
- HibernateTransactionManager类
  - 适用于Hibernate3.0及以上版本
- JpaTransactionManager类
  - 适用于JPA (Java EE 标准之一，为POJO提供持久化标准规范，并规范了持久化开发的统一API，符合JPA规范的开发可以在不同的JPA框架下运行)
PlatformTransactionManager接口定义了事务的基本操作：
①获取事务
TransactionStatus getTransaction(TransactionDefinition definition)
②提交事务
void commit(TransactionStatus status)
③回滚事务
void rollback(TransactionStatus status)
示例：//1. 创建事务管理器
    DataSourceTransactionManager dstm = new DataSourceTransactionManager();
    //2. 为事务管理器设置与数据层相同的数据源
    dstm.setDataSource(dataSource);

3. 事务定义对象(TransactionDefinition)
DefaultTransactionDefinition td = new DefaultTransactionDefinition();
TransactionDefinition接口定义了事务的基本信息：
①事务隔离级别
td.setIsolationLevel(TransactionDefinition.ISOLATION_DEFAULT);
//mysql默认隔离级别是REPEATABLE_READ
//oracle默认隔离级别是READ_COMMITTED
②事务是否只读
td.setReadOnly(false);
//false, 表示可读可写(适合增删改操作)【默认设置】
//true, 表示只读(适合查,效率高)
③事务超时时间（秒）
td.setTimeout(10);//超时时间为10秒
//默认值是-1, 表示永不超时
④事务传播行为
td.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);

4. 事务状态对象(TransactionStatus)
定义了事务在执行过程中某个时间点上事务对象的状态信息
创建事务状态对象   (用于控制事务执行[相当于开启事务])
TransactionStatus ts = dstm.getTransaction(td);
获取事务是否处于新开启事务状态
boolean isNewTransaction();
获取事务是否处于完成状态
boolean isCompleted();
//获取事务是否处于回滚状态
boolean isRollbackOnly();
//获取事务是否具备回滚存储点
boolean hasSavepoint();
//设置事务处于回滚状态
void setRollbackOnly()
//刷新事务状态
void flush();

代码示例：
//1、创建事务管理器对象
DataSourceTransactionManager dstm = new DataSourceTransactionManager();
//2、把事务器对象和数据库连接池进行绑定
dstm.setDataSource(dataSource);
//3、开启事务
TransactionStatus ts = dstm.getTransaction(new DefaultTransactionDefinition());
//4、事务操作（业务）
业务层中的代码.....
//5、提交事务|回滚事务
dstm.commit(ts);

Spring事务-编程式事务
使用编程式事务改造转账业务
此时代码存在问题
 * 1.事务管理代码和业务代码耦合在一起
 * 2.后续还需编写事务代码

使用Spring的AOP改造编程式事务
修改业务类AccountService2Impl2

声明式事务
Spring底层封装了事务通知类，直接配置即可用。称为：声明式事务
开发步骤：
1.开启事务管理支持
@EnableTransactionManagement
2.配置事务管理器
@Bean
public DataSourceTransactionManager getTxManager(DataSource dataSource){
    //创建事务管理器
    DataSourceTransactionManager manager = new DataSourceTransactionManager();
    manager.setDataSource(dataSource);//给事务管理器设置数据源
    return manager;
}
3.配置需要事务支持的切入点
@Transactional(
    isolation = Isolation.DEFAULT,  //使用数据库默认的隔离级别
    readOnly = false,  //不是只读事务（增删改查都可以）
    timeout = 10,  //超时时间
    propagation = Propagation.REQUIRED //设置事务传播行为
)
void transfer(int outId,int inId,double money);
使用声明式事务实现转账业务




















